### 为了测试中间层业务，需要熟悉数据库的基本操作
- mysql安装，配置
  - 1. 安装
    - https://www.centos.bz/2019/02/centos7-%E5%AE%89%E8%A3%85-mysql/
  - 2. 配置密码
    - grep 'temporary password' /var/log/mysqld.log （查看临时密码）
    - mysql -uroot -p
    - SET PASSWORD FOR 'root'@'localhost' = PASSWORD('123456789');
  - 3.设置远程访问权限，并重启
    - use mysql
    - update user set host = '%' where user = 'root';
    - select host, user from user;
    - quit
    - service mysqld restart
  - 4.修改字符集为utf8,默认为latin1
    ```
    [mysqld]
    character-set-server=utf8
    init_connect = 'SET NAMES utf8'
    collation-server=utf8_general_ci
    [client]
    default-character-set=utf8
    ```
    - alter table testtb convert to charset utf8; 表中修改
- node中mysql操作（sql语句）
  - 1.库，表相关
    - create database test; 创建库
    - USE test;
    - SELECT DATABASE(); 查看当前库
    - CREATE TABLE te1(id int(20) primary key auto_increment , username VARCHAR(20) unique key NOT NULL ,age TINYINT UNSIGNED, salary FLOAT(8,2) UNSIGNED); 建表，对应字段和数据类型及限制
    - SHOW TABLES;
    - SHOW COLUMNS FROM te1; 显示表结构
  - 2.插入查询
    - INSERT TABLENAME(KEY,KEY) VALUES('HHHH','BLABLAL');  KEY如果不填时，说明全部字段均要输入
    - SELECT xxx FROM TABLE
      - select * from user order by age desc Limit 2,2; 降序查询 limit限制返回条数索引为2开始返回两条
  - 3.外键设置
    - 条件，子表的外键必须与父表数据类型一致
    - CREATE TABLE users(id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT, 
      username VARCHAR(20) NOT NULL,
      pid SMALLINT UNSIGNED,
      FOREIGN KEY (pid) REFERENCES provinces (id)); // 外键设置为Pid,参考provinces表中的id
  - 4.表结构修改
    - ALTER TABLE users ADD age TINYINT UNSIGNED NOT NULL DEFAULT 10; 添加
    - ALTER TABLE users DROP age
  - 5.更新与删除
    - UPDATE user set sex=0, age = age + 10 where id % 2 = 0;
    - update连接子表更新 INNER JOIN 
      - UPDATE tdb_goods INNER JOIN tdb_goods_brands on tdb_goods_brands.brand_name = tdb_goods.brand_name set tdb_goods.brand_name = brand_id;
    - DELETE FROM user WHERE id = 6;
  - 6.多表更新
    - 实际上为多张表根据相同字段进行拼接。 属性为join table on 条件
    - SELECT goods_name, goods_cate, brand_name from tdb_goods as g inner join tdb_cate as c on g.cate_id = c.cate_id inner join tdb_goods_brands1 as b on b.brand_id = g.brand_id;
    
